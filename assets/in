#!/usr/bin/env bash
# vim: set ft=sh

set -euo pipefail

exec 3>&1
exec 1>&2

cd "${1}"

payload=$(mktemp /tmp/resource.XXXXXX)
cat > "${payload}" <&0

# source
bitbucket_type="$(jq -r '.source.bitbucket_type // "server"' < "${payload}")"
base_url="$(jq -r '.source.base_url // ""' < "${payload}")"
username="$(jq -r '.source.username // ""' < "${payload}")"
password="$(jq -r '.source.password // ""' < "${payload}")"
project="$(jq -r '.source.project // ""' < "${payload}")"
repository="$(jq -r '.source.repository // ""' < "${payload}")"
git="$(jq -r '.source.git // ""' < "${payload}")"
submodule_recursive="$(jq -r '.params.submodule_recursive // true' < "${payload}")"
# params
skip_download="$(jq -r '.params.skip_download // false' < "${payload}")"
# version
version="$(jq -r '.version' < "${payload}")"
version_id="$(jq -r '.version.id' < "${payload}")"

if [[ -z "${base_url}" ]]; then
    echo "error: source.base_url can't be empty"
    exit 1
fi
if [[ -z "${project}" ]]; then
    echo "error: source.project can't be empty"
    exit 1
fi
if [[ -z "${repository}" ]]; then
    echo "error: source.repository can't be empty"
    exit 1
fi
if [[ -z "${git}" ]]; then
    echo "error: source.git can't be empty"
    exit 1
fi

if [[ "$bitbucket_type" == "server" ]]; then
    uri="${base_url}/rest/api/1.0/projects/${project}/repos/${repository}/pull-requests/${version_id}"
elif [[ "$bitbucket_type" == "cloud" ]]; then
    uri="${base_url}/api/2.0/repositories/${project}/${repository}/pullrequests/${version_id}"
fi
pr=$(mktemp /tmp/resource.XXXXXX)
curl -s --fail -u "${username}:${password}" "${uri}" > "${pr}"

git_payload=$(echo "${git}" | jq --argjson version "${version}" --slurpfile pr "${pr}" --arg recur "${submodule_recursive}" '
    {source: (. * {branch: $version.branch})}
    + {version: {ref: $version.commit}}
    + {
        params: {
          fetch: [ $pr[0].toRef.id|ltrimstr("refs/heads/") ],
          submodule_recursive: $recur
        }
      }
')

resource_path="${@%/}"
if [[ "${skip_download}" = "false" ]]; then
    echo "$git_payload" | /opt/git-resource/in "${resource_path}"
else
    mkdir -p ${resource_path}/.git/info
fi

# exclude pull-request-info from git index
echo "pull-request-info" > ${resource_path}/.git/info/exclude

# Bitbucket Cloud and (self-hosted) Server APIs are a bit different
if [[ "$bitbucket_type" == "server" ]]; then
    jq -n --argjson version "${version}" --slurpfile pr "${pr}" '{
            id: $pr[0].id,
            description: $pr[0].description,
            author: {
                name: $pr[0].author.user.name,
                email: $pr[0].author.user.emailAddress,
                fullname: $pr[0].author.user.displayName,
            },
            commit: $version.commit,
            feature_branch: $version.branch,
            title: $pr[0].title,
            upstream_branch: $pr[0].toRef.id,
            url: $pr[0].links.self[0].href,
            updated_at: $version.updated_at
        }' > pull-request-info

    cp pull-request-info .git/pr

    jq -n --argjson version "${version}" --slurpfile pr "${pr}" '{
            version: $version,
            metadata: [
                {name: "url", value: $pr[0].links.self[0].href},
                {name: "author", value: $pr[0].author.user.displayName},
                {name: "commit", value: $version.commit},
                {name: "feature-branch", value: $version.branch},
                {name: "upstream-branch", value: $pr[0].toRef.id}
            ]
        }' >&3
elif [[ "$bitbucket_type" == "cloud" ]]; then
    jq -n --argjson version "${version}" --slurpfile pr "${pr}" '{
            id: $pr[0].id,
            description: $pr[0].description,
            author: {
                name: $pr[0].author.username,
                fullname: $pr[0].author.display_name,
            },
            commit: $version.commit,
            feature_branch: $version.branch,
            title: $pr[0].title,
            upstream_branch: $pr[0].destination.branch.name,
            url: $pr[0].links.html.href,
            updated_at: $pr[0].created_on
        }' > pull-request-info

    cp pull-request-info .git/pr

    jq -n --argjson version "${version}" --slurpfile pr "${pr}" '{
            version: $version,
            metadata: [
                {name: "title", value: $pr[0].title},
                {name: "url", value: $pr[0].links.html.href},
                {name: "author", value: $pr[0].author.display_name},
                {name: "commit", value: $version.commit},
                {name: "feature-branch", value: $version.branch},
                {name: "upstream-branch", value: $pr[0].destination.branch.name},
                {name: "pullrequest updated", value: $pr[0].updated_on}
            ]
        }' >&3
fi
